<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context" xmlns:jdbc="http://www.springframework.org/schema/jdbc"
	xmlns:aop="http://www.springframework.org/schema/aop"  
	xmlns:jee="http://www.springframework.org/schema/jee" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:jpa="http://www.springframework.org/schema/data/jpa"
	xmlns:task="http://www.springframework.org/schema/task"  
	xsi:schemaLocation="
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.1.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.1.xsd
		http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc-4.0.xsd
		http://www.springframework.org/schema/jee http://www.springframework.org/schema/jee/spring-jee-4.1.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.1.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.1.xsd
		http://www.springframework.org/schema/task
    	http://www.springframework.org/schema/task/spring-task-4.0.xsd
		http://www.springframework.org/schema/data/jpa http://www.springframework.org/schema/data/jpa/spring-jpa-1.3.xsd
		http://www.springframework.org/schema/batch http://www.springframework.org/schema/batch/spring-batch-3.0.xsd"
	default-lazy-init="true">


	<!-- Use annotations (@Autowired) for property injection 
	有了<context:component-scan>，另一个<context:annotation-config/>标签根本可以移除掉，因为已经被包含进去了
	-->
	<context:annotation-config />
	
	<!-- 使用annotation 自动注册bean, 并保证@Required、@Autowired的属性被注入  
	use-default-filters默认true自动注册对@Component、@ManagedBean、@Named注解的Bean进行扫描-->
	<context:component-scan base-package="com.tenfi" use-default-filters="false"> 
		<context:include-filter type="regex" expression="com.tenfi..*.service.*.*" /> 
		<context:include-filter type="regex" expression="com.tenfi..*.dao.*.*" />
	</context:component-scan>
	
	<!-- Configure a Hibernate SessionFactory -->
	<bean id="sessionFactory"
		class="org.springframework.orm.hibernate4.LocalSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<property name="packagesToScan" value="com.tenfi.**.model" />
		<property name="hibernateProperties">
			<bean class="org.springframework.beans.factory.config.PropertiesFactoryBean">
				<property name="properties">
					<props>
						<prop key="hibernate.dialect">${hibernate.dialect}</prop>
						<prop key="hibernate.show_sql">${hibernate.show_sql}</prop>
						<prop key="hibernate.use_outer_join">${hibernate.use_outer_join}</prop>
						<prop key="hibernate.hbm2ddl.auto">${hibernate.hbm2ddl.auto}</prop>
						
						<!-- <prop key="hibernate.current_session_context_class">thread</prop> -->
						
						<!-- 配置二级缓存  使用@Cacheable @Cache(usage=CacheConcurrencyStrategy.READ_WRITE)在model类上-->
        				<prop key="hibernate.cache.use_second_level_cache">true</prop>
        				<prop key="hibernate.cache.region.factory_class">org.hibernate.cache.ehcache.EhCacheRegionFactory</prop>
        				<prop key="hibernate.cache.use_query_cache">true</prop>
<!--         				<prop key="net.sf.ehcache.configurationResourceName">ehcache/ehcache.xml</prop> -->
					</props>
				</property>
			</bean>
		</property>
<!-- 		<property name="entityInterceptor"> -->
<!-- 			<bean id ="matrixHibernateInterceptor" class="com.matrix.core.dao.MatrixHibernateInterceptor" /> -->
<!-- 		</property> -->
	</bean>
	
	<!-- Configure a Transaction Manager -->
	<bean id="transactionManager"
		class="org.springframework.orm.hibernate4.HibernateTransactionManager">
		<property name="sessionFactory" ref="sessionFactory" />
		<property name="globalRollbackOnParticipationFailure" value="false" />
	</bean>
	<!-- 设置事务的传播特性 -->
	<!-- <tx:annotation-driven /> -->
	<tx:advice id="txAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<tx:method name="save*" propagation="REQUIRED"/>
			<tx:method name="add*" propagation="REQUIRED"/>
			<tx:method name="create*" propagation="REQUIRED"/>
			<tx:method name="insert*" propagation="REQUIRED"/>
			<tx:method name="remove*" propagation="REQUIRED"/>
			<tx:method name="execute*" propagation="REQUIRED"/>
			<tx:method name="update*" propagation="REQUIRED"/>
			<tx:method name="delete*" propagation="REQUIRED"/>
			<tx:method name="submit*" propagation="REQUIRED"/>
			<tx:method name="*" propagation="REQUIRED" read-only="true"/>
		</tx:attributes>
	</tx:advice>

	<aop:config proxy-target-class="true">
		<aop:advisor pointcut="execution(* com.tenfi..service.*.*(..))" advice-ref="txAdvice" />
	</aop:config>
	
	<!-- local development环境 -->
	<beans profile="development">
		<context:property-placeholder ignore-resource-not-found="true"
			location="classpath*:/application.development.properties" />	

		<!-- Tomcat JDBC连接池 -->
		<bean id="dataSource" class="org.apache.tomcat.jdbc.pool.DataSource" destroy-method="close">
			<!-- Connection Info -->
			<property name="driverClassName" value="${jdbc.driver}" />
			<property name="url" value="${jdbc.url}" />
			<property name="username" value="${jdbc.username}" />
			<property name="password" value="${jdbc.password}" />
		
			<!-- Connection Pooling Info -->
			<property name="maxActive" value="${jdbc.pool.maxActive}" />
			<property name="maxIdle" value="${jdbc.pool.maxIdle}" />
			<property name="minIdle" value="0" />
			<property name="defaultAutoCommit" value="false" />
		</bean>
		<!-- 初始化数据表结构 与默认数据-->
<!-- 		<jdbc:initialize-database data-source="dataSource" ignore-failures="ALL"> -->
<!-- 			<jdbc:script location="classpath:sql/mysql/init-data.sql" encoding="UTF-8"/> -->
<!-- 		</jdbc:initialize-database> -->
	
	</beans>
</beans>